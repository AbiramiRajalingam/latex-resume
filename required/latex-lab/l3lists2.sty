%%
%% This is file `l3lists2.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3lists2.dtx  (with options: `package')
%% 
%% This is a generated file.
%% 
%% Copyright 2021 LaTeX Project
%% 
%% This file was generated from file(s) of the LaTeX `l3lists2 Bundle'.
%% -----------------------------------------------------------------------------
%% 
%% It may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008 or later.
%% 
%% This file may only be distributed together with a copy of the LaTeX
%% `l3lists2 Bundle'. You may however distribute the `l3lists2 Bundle'
%% without such generated files.
%% 
%% The newest sources can be found below
%% 
%%    https://github.com/FrankMittelbach/fmitex/
%% 
%% where one can also log issues in case there are any.
%% 
%% 
%% File: l3lists2.dtx (C) Copyright 2021-2023 LaTeX Project

\def\ltlistsversion{v0.9a}
\def\ltlistsdate{2023/02/08}

\ProvidesPackage {l3lists2}[2022-08-07 v0.01 beta list refactoring]
\RequirePackage{xtemplate}
\ExplSyntaxOn
\def\@doendpe{\@endpetrue
  \def\par
    {
      \@restorepar
      \clubpenalty\@clubpenalty
      \__kernel_displayblock_doendpe:
      \everypar{}
      \par
      \@endpefalse
      \@endpeflattenedfalse
    }
  \everypar{{\setbox\z@\lastbox}
            \everypar{}
            \@endpefalse\@endpeflattenedfalse}
}
\cs_new_eq:NN \__kernel_displayblock_doendpe: \prg_do_nothing:
\def\@endpetrue {\global\let\if@endpe\iftrue}
\def\@endpefalse{\global\let\if@endpe\iffalse}
\newif\if@endpeflattened
\def\@endpeflattenedtrue {\global\let\if@endpeflattened\iftrue}
\def\@endpeflattenedfalse{\global\let\if@endpeflattened\iffalse}
\DeclareObjectType{blockenv}{1}
\DeclareObjectType{block}{1}
\DeclareObjectType{list}{1}
\DeclareObjectType{item}{1}
\DeclareTemplateInterface{blockenv}{display}{1}
{
  env-name       : tokenlist ,
  tag-name       : tokenlist ,
  tag-class      : tokenlist ,
  tagging-recipe : tokenlist = ,
  level-counter  : tokenlist,
  level-increase : boolean = true ,
  max-levels     : tokenlist = 3,
  setup-code     : tokenlist ,
  block-instance : tokenlist = displayblock ,
  list-instance  : tokenlist ,
}
\DeclareTemplateInterface{block}{display}{1}
{
  heading         : tokenlist = ,                               %??
  beginsep        : skip = \topsep ,
  begin-par-skip  : skip = \partopsep ,
  par-skip        : skip = \parsep ,
  end-skip        : skip = \KeyValue{beginsep} ,
  end-par-skip    : skip = \KeyValue{begin-par-skip} ,
  beginpenalty    : integer = \UseName{@beginparpenalty} ,
  endpenalty      : integer = \UseName{@endparpenalty} ,
  leftmargin      : length = \leftmargin ,
  rightmargin     : length = \rightmargin ,
  parindent       : length = \listparindent ,
}
\DeclareTemplateInterface{list}{std}{1}     % optional
{
  counter         : tokenlist = ,
  item-label      : tokenlist = ,
  start           : integer = 1 ,
  resume          : boolean = false ,
  item-instance   : instance{item} ,
  item-skip       : skip = \itemsep ,
  item-penalty    : integer = \UseName{@itempenalty} ,
  item-indent     : length = 0pt ,         % was \itemindent
  label-width     : length = \labelwidth ,
  label-sep       : length = \labelsep ,
  compatibility   : boolean = false ,
}
\DeclareTemplateInterface{item}{std}{1}
  {
    counter-label : function{1} = \arabic{#1} ,
    counter-ref   : function{1} = \KeyValue{counter-label} ,
    label-ref     : function{1} = #1 ,
    label-autoref : function{1} = item~#1 ,
    label-format  : function{1} = #1 ,
    label-strut   : boolean = false ,
    label-align   : choice {left,center,right,parleft} = right ,
    label-boxed   : boolean = true ,
    next-line     : boolean = false ,
    text-font     : tokenlist ,
    compatibility : boolean = true ,
  }
\cs_new_protected:Npn \__block_skip_set_to_last:N #1 {
  \skip_set:Nn #1 { \tex_lastskip:D }
}
\cs_new_eq:NN \__block_skip_remove_last: \tex_unskip:D
\cs_generate_variant:Nn \tl_if_novalue:nTF { o }
\cs_if_exist:NF \tag_if_active:T
   { \cs_new_eq:NN \tag_if_active:T \use_none:n }
\bool_new:N \g__block_debug_bool
\cs_new_eq:NN \__block_debug:n \use_none:n
\cs_new_eq:NN \__block_debug_typeout:n \use_none:n
\cs_new_protected:Npn \block_debug_on:
  {
    \bool_gset_true:N \g__block_debug_bool
    \__block_debug_gset:
  }
\cs_new_protected:Npn \block_debug_off:
  {
    \bool_gset_false:N \g__block_debug_bool
    \__block_debug_gset:
  }
\cs_new_protected:Npn \__block_debug_gset:
  {
    \cs_gset_protected:Npx \__block_debug:n ##1
      { \bool_if:NT \g__block_debug_bool {##1} }
    \cs_gset_protected:Npx \__block_debug_typeout:n ##1
      { \bool_if:NT \g__block_debug_bool { \typeout{==>~ ##1} } }
  }
\cs_new_protected:Npn \DebugBlocksOn  { \block_debug_on:  }
\cs_new_protected:Npn \DebugBlocksOff { \block_debug_off: }
\DebugBlocksOn
\NewDocumentEnvironment{displayblock}{ !O{} }
  { \UseInstance{blockenv}{displayblock} {#1} }
  { \endblockenv }
\NewDocumentEnvironment{displayblockflattened}{ !O{} }
  { \UseInstance{blockenv}{displayblockflattened} {#1} }
  { \endblockenv }
\RenewDocumentEnvironment{center} { !O{} }
{
  \displayblockflattened [#1]
  \centering
  \tl_set:Nn \l_tag_para_attr_class_tl {center}
}
{ \enddisplayblockflattened }
\RenewDocumentEnvironment{flushright} { !O{} }
{
  \displayblockflattened [#1]
  \raggedleft
  \tl_set:Nn \l_tag_para_attr_class_tl {raggedleft}
}
{ \enddisplayblockflattened }
\RenewDocumentEnvironment{flushleft} { !O{} }
{
  \displayblockflattened [#1]
  \raggedright
  \tl_set:Nn \l_tag_para_attr_class_tl {raggedright}
}
{ \enddisplayblockflattened }
\tl_new:N\l_tag_para_attr_class_tl
\tl_set:Nn \l_tag_para_attr_class_tl {justify}
\tag_if_active:T
{
  \tagpdfsetup
      {
        newattribute = {justify}    {/O /Layout /TextAlign/Justify},
        newattribute = {center}     {/O /Layout /TextAlign/Center},
        newattribute = {raggedright}{/O /Layout /TextAlign/Start},
        newattribute = {raggedleft} {/O /Layout /TextAlign/End},
      }
}
\RenewDocumentEnvironment{quote}{ !O{} }
  { \UseInstance{blockenv}{quote} {#1} }
  { \endblockenv }
\RenewDocumentEnvironment{quotation}{ !O{} }
  { \UseInstance{blockenv}{quotation} {#1} }
  { \endblockenv }
\newcommand\@setupverbinvisiblespace{}
\tag_if_active:T {
  \bool_if:NF\g__tag_mode_lua_bool
   {
     \renewcommand\@setupverbinvisiblespace{\def\@xobeysp{\nobreakspace\pdffakespace}}
   }
}
\RenewDocumentEnvironment{verbatim}{ !O{} }
  { \UseInstance{blockenv}{verbatim} {#1}
    \tagpdfsetup{paratag=Code}% oder schneller: \tl_set:Nn\l__tag_para_tag_tl{Code}
    \@newverbatim\@setupverbinvisiblespace \frenchspacing \@vobeyspaces \@xverbatim
  }
  { \endblockenv }
\RenewDocumentEnvironment{verbatim*}{ !O{} }
  { \UseInstance{blockenv}{verbatim} {#1}
    \tagpdfsetup{paratag=Code}% oder schneller: \tl_set:Nn\l__tag_para_tag_tl{Code}
    \@newverbatim\@setupverbvisiblespace
    \frenchspacing\@vobeyspaces\@sxverbatim
  }
  { \endblockenv }
\def\@newverbatim{%
  \language\l@nohyphenation
  \@tempswafalse
  \def\par{%
    \if@tempswa
      \leavevmode \null \@@par\penalty\interlinepenalty
    \else
      \@tempswatrue
      \ifhmode\@@par\penalty\interlinepenalty\fi
    \fi}%
  \let\do\@makeother \dospecials
  \obeylines \verbatim@font \@noligs
  \everypar \expandafter{\the\everypar \unpenalty}%
}
\RenewDocumentEnvironment{itemize}{!O{}}
  { \UseInstance{blockenv}{itemize} {#1} }
  { \endblockenv }
\RenewDocumentEnvironment{enumerate}{!O{}}
  { \UseInstance{blockenv}{enumerate} {#1} }
  { \endblockenv }
\RenewDocumentEnvironment{description}{!O{}}
  { \UseInstance{blockenv}{description} {#1} }
  { \endblockenv }
\RenewDocumentEnvironment{list}{O{} m m }
  {
    \tl_set:Nn \@itemlabel {#2}
    \tl_set:Nn \l__block_legacy_env_params_tl {#3}
    \UseInstance{blockenv}{list} {#1}
  }
  { \endblockenv }
\tl_new:N \l__block_env_params_tl
\tag_if_active:T {
  \tagpdfsetup{add-new-tag={tag=list,role=L}}
}
\cs_new:Npn \legacylistsetupcode {
    \dim_zero:N \listparindent
    \dim_zero:N \rightmargin
    \dim_zero:N \itemindent
    \tl_set:Nn \@listctr {}
    \legacy_if_set_false:n { @nmbrlist } % needed if lists are nested
   \let\makelabel\@mklab % TODO: customize
   \l__block_legacy_env_params_tl
    \legacy_if:nTF { @nmbrlist }
      { \tl_set:Nn \l__tag_L_attr_class_tl {enumerate} }   % numbered list
      { \tl_if_empty:NTF \@itemlabel
          { \tl_set:Nn \l__tag_L_attr_class_tl {list}    } % no label
          { \tl_set:Nn \l__tag_L_attr_class_tl {itemize} } % unnumbered, unordered
      }
}
\RenewDocumentEnvironment{trivlist}{ !O{} }
  { \list[#1]{}{} }
  { \endblockenv }
\cs_new:Npn \g_block_nesting_depth_int { \@listdepth }  % a fake int
                                                        % for now
\DeclareTemplateCode{blockenv}{display}{1}
{
  env-name       = \l__block_env_name_tl ,
  tag-name       = \l__block_tag_name_tl ,
  tag-class      = \l__block_tag_class_tl ,
  tagging-recipe = \l__block_tagging_recipe_tl ,
  level-counter  = \l__block_level_counter_tl ,
  level-increase = \l__block_level_incr_bool ,
  max-levels     = \l__block_max_levels_tl ,
  setup-code     = \l__block_setup_code_tl ,
  block-instance = \l__block_block_instance_tl ,
  list-instance  = \l__block_list_instance_tl ,
}
{
  \__block_debug_typeout:n{\l__block_env_name_tl -env-start}
  \tl_if_empty:NF \l__block_level_counter_tl
     {
       \int_compare:nNnTF  \l__block_level_counter_tl > \l__block_max_levels_tl
           { \@toodeep }
           { \int_incr:N \l__block_level_counter_tl }  % not clean "o"?
     }
  \bool_if:NT \l__block_level_incr_bool
     {
       \int_compare:nNnTF  \g_block_nesting_depth_int >
                           {\c@maxblocklevels - 1 }
           { \@toodeep }
           {
             \int_gincr:N \g_block_nesting_depth_int
             \use:c { @list \int_to_roman:n { \g_block_nesting_depth_int } }
           }
     }
  \tag_if_active:T { \use:c { __block_recipe_ \l__block_tagging_recipe_tl : } }
  \l__block_setup_code_tl
  \__block_debug_typeout:n{use~ instance:~
           \l__block_block_instance_tl - \int_use:N \g_block_nesting_depth_int }
  \UseInstance{block}
              { \l__block_block_instance_tl - \int_use:N
                \g_block_nesting_depth_int }
              {#1}
  \tl_if_empty:NF \l__block_list_instance_tl
    {
      \__block_debug_typeout:n{use~ instance:~ \l__block_list_instance_tl
               \tl_if_empty:NF \l__block_level_counter_tl
                       { - \int_use:N \l__block_level_counter_tl }}
      \UseInstance{list}
                  { \l__block_list_instance_tl
                    \tl_if_empty:NF \l__block_level_counter_tl
                       { - \int_use:N \l__block_level_counter_tl }  % not clean
                                                                % use "o"?
                  }
                  {#1}
    }
  \ignorespaces
}
\newcounter{maxblocklevels}
\setcounter{maxblocklevels}{6}
\cs_new:Npn \endblockenv {
  \__block_debug_typeout:n{blockenv~ common~ ending}
  \bool_if:NT \l__block_level_incr_bool
    { \int_gdecr:N \g_block_nesting_depth_int }
  \str_if_eq:VnTF \l__block_tagging_recipe_tl {flattened}
    \@endpeflattenedtrue   % bad name
    \@endpeflattenedfalse  % bad name
  \legacy_if:nT { @inlabel }
    {
      \mode_leave_vertical:
      \legacy_if_gset_false:n { @inlabel }
    }
  \legacy_if:nT { @newlist }
    {
      \@noitemerr
      \legacy_if_gset_false:n { @newlist }
    }
  \mode_if_horizontal:TF
       { \__block_skip_remove_last: \__block_skip_remove_last: \par }
       { \@inmatherr{\end{\@currenvir}} }
  \__kernel_displayblock_end:
  \legacy_if:nF { @noparlist }
    {
      \__block_skip_set_to_last:N \l_tmpa_skip
      \dim_compare:nNnT \l_tmpa_skip > \c_zero_dim
        {
          \skip_vertical:n { - \l_tmpa_skip }
          \skip_vertical:n { \l_tmpa_skip + \parskip - \@outerparskip }
        }
      \addpenalty \@endparpenalty
      \addvspace \l__block_topsepadd_skip
    }
  \legacy_if_set_true:n { @endpe }
}
\cs_new:Npn \__kernel_displayblock_end: {
  \__block_debug_typeout:n{\detokenize{__kernel_displayblock_end:}}
}


\DeclareTemplateCode{block}{display}{1}
{
  heading         = \l__block_heading_tl ,
  beginsep        = \topsep ,
  begin-par-skip  = \partopsep ,
  par-skip        = \parsep ,
  end-skip        = \l__block_botsep_skip ,
  end-par-skip    = \l__block_parbotsep_skip ,
  beginpenalty    = \@beginparpenalty ,
  endpenalty      = \@endparpenalty ,
  rightmargin     = \rightmargin ,
  leftmargin      = \leftmargin ,
  parindent       = \listparindent ,
}
{
  \tl_if_empty:nF {#1} { \SetTemplateKeys{block}{display}{#1} }
    \tl_if_blank:oF \l__block_heading_tl
      { \mode_leave_vertical: \textbf{\l__block_heading_tl} } % TODO customize
    \legacy_if:nT { @noskipsec } { \mode_leave_vertical: }
    \skip_set:Nn \l__block_topsepadd_skip { \topsep }
    \mode_if_vertical:TF
      {
        \skip_add:Nn \l__block_topsepadd_skip { \partopsep }
        \__kernel_displayblock_beginpar_vmode:
      }
      {
        \__block_skip_remove_last: \__block_skip_remove_last:
        \__kernel_displayblock_beginpar_hmode:w \par
      }
    \legacy_if:nTF { @inlabel }
      {
        \legacy_if_set_true:n { @noparitem }
        \legacy_if_set_true:n { @noparlist }
      }
      {
        \legacy_if:nT { @newlist } { \@noitemerr }
        \legacy_if_set_false:n { @noparlist }
        \skip_set_eq:NN \l__block_effective_top_skip \l__block_topsepadd_skip
      }
    \skip_add:Nn \l__block_effective_top_skip { \parskip }
    \skip_zero:N \leftskip
    \skip_set_eq:NN \rightskip \@rightskip
    \skip_set_eq:NN \parfillskip \@flushglue
    \int_zero:N \par@deathcycles
    \@setpar
      {
        \legacy_if:nTF { @newlist }
          {
            \int_incr:N \par@deathcycles
            \int_compare:nNnTF \par@deathcycles > { 1000 }
                { \@noitemerr
                  { \para_end: }
                }
          }
          {
            { \para_end: }
          }
      }
    \skip_set_eq:NN \@outerparskip \parskip
    \skip_set_eq:NN \parskip \parsep
    \dim_set_eq:NN \parindent \listparindent
    \dim_add:Nn \linewidth { - \rightmargin - \leftmargin }
    \dim_add:Nn \@totalleftmargin { \leftmargin }
    \tex_parshape:D 1 ~ \@totalleftmargin \linewidth
    \__kernel_displayblock_begin:
    \legacy_if:nTF { @noparitem }
      {
        \legacy_if_set_false:n { @noparitem }
        \hbox_gset:Nn \g__block_labels_box
          {
            \skip_horizontal:n { - \leftmargin }
            \hbox_unpack_drop:N \g__block_labels_box
            \skip_horizontal:n { \leftmargin }
          }
        \legacy_if:nF { @minipage } % Why this chunk of code?
          {
            \__block_skip_set_to_last:N \l__block_tmpa_skip
            \skip_vertical:n { - \l__block_tmpa_skip }
            \skip_vertical:n { \l__block_tmpa_skip + \@outerparskip - \parskip }
          }
      }
      {
        \legacy_if:nTF { @nobreak }
          { \addvspace{\skip_eval:n{\@outerparskip-\parskip}} }
          {
            \addpenalty \@beginparpenalty
            \addvspace \l__block_effective_top_skip
            \addvspace{-\parskip}
          }
      }
}
\keys_define:nn { template/block/display }
{
  ,topsep        .skip_set:N = \topsep
  ,partopsep     .skip_set:N = \partopsep
  ,listparindent .skip_set:N = \listparindent
}
\cs_new:Npn \__kernel_displayblock_begin: {
  \__block_debug_typeout:n{\detokenize{__kernel_displayblock_begin:}}
}
\cs_new:Npn \__kernel_displayblock_beginpar_hmode:w {
  \__block_debug_typeout:n{\detokenize{__kernel_displayblock_beginpar_hmode:w}}
}
\cs_new:Npn \__kernel_displayblock_beginpar_vmode: {
  \__block_debug_typeout:n{\detokenize{__kernel_displayblock_beginpar_vmode:}}
}
\tl_new:N \@itemlabel         % should have a top-level definition
\tl_new:N \@listctr           % should have a top-level definition
\DeclareTemplateCode{list}{std}{1}
{
  counter         = \l__block_counter_tl,
  item-label      = \l__block_item_label_tl,
  start           = \l__block_counter_start_int ,
  resume          = \l__block_resume_bool ,
  item-instance   = \__block_item_instance:n ,
  item-skip       = \itemsep ,
  item-penalty    = \@itempenalty ,
  item-indent     = \itemindent ,
  label-width     = \labelwidth ,
  label-sep       = \labelsep ,
  compatibility   = \l__block_compatibility_bool , % FMi questionable
}
{
  \__block_debug_typeout:n{template:list:std}
  \tl_if_empty:nF {#1} { \SetTemplateKeys{list}{std}{#1} }
  \tl_if_empty:NTF \l__block_counter_tl
    {
     \tl_if_blank:oF \@listctr
       {
         \bool_if:NF \l__block_resume_bool
           {
             \int_gset:cn{ c@ \@listctr }
                 { \l__block_counter_start_int - 1 }
           }
       }
       { \@nmbrlistfalse }
    }
    {
     \@nmbrlisttrue
     \tl_set_eq:NN \@listctr \l__block_counter_tl
     \bool_if:NF \l__block_resume_bool
       {
         \int_gset:cn{ c@ \@listctr }
             { \l__block_counter_start_int - 1 }
       }
    }
  \tl_if_empty:NF \l__block_item_label_tl
    {
      \tl_set_eq:NN \@itemlabel \l__block_item_label_tl
    }
    \legacy_if_gset_true:n { @newlist }
  \__block_debug_typeout:n{template:list:std~end}
}
\keys_define:nn { template/list/std }
{
  ,nosep .code:n =
    \dim_zero:N \itemsep
    \dim_zero:N \parsep
    \dim_zero:N \topsep
    \dim_zero:N \l__block_botsep_skip
    \dim_zero:N \l__block_parbotsep_skip
  ,midsep    .skip_set:N = \topsep
}
\keys_define:nn { template/item/std }
                { label .tl_set:N = \l__block_label_given_tl }
\DeclareTemplateCode{item}{std}{1}
  {
    counter-label   = \__block_counter_label:n ,
    counter-ref     = \__block_counter_ref:n ,
    label-ref       = \__block_label_ref:n ,
    label-autoref   = \__block_label_autoref:n ,
    label-format    = \__block_label_format:n ,
    label-strut     = \l__block_label_strut_bool ,
    label-boxed     = \l__block_label_boxed_bool ,
    next-line       = \l__block_next_line_bool ,
    text-font       = \l__block_text_font_tl ,
    compatibility   = \l__block_item_compatibility_bool ,
    label-align     = {
      left    = \tl_set:Nn \l__block_item_align_tl { \relax \hss } ,
      center  = \tl_set:Nn \l__block_item_align_tl { \hss \hss } ,
      right   = \tl_set:Nn \l__block_item_align_tl { \hss \relax } ,
      parleft = \NOT_IMPLEMENTED ,
    } ,
  }
  {
    \__block_debug_typeout:n{template:item:std}
    \tl_set_eq:NN \l__block_label_given_tl \c_novalue_tl
    \tl_if_empty:nF{#1}{ \SetTemplateKeys{item}{std}{#1} }
    \tl_if_novalue:oTF \l__block_label_given_tl
      {
        \tl_if_blank:oF \@listctr { \refstepcounter \@listctr }
        \bool_if:NTF \l__block_item_compatibility_bool   % not sure that conditional
                                                     % makes sense
          { \__block_make_label_box:n { \@itemlabel } } % TODO ?
          { \__block_make_label_box:n { \__block_counter_label:n { \@listctr } } }
      }
      {
        \__block_debug_typeout:n{item~ with~ optional}
        \__block_make_label_box:n { \l__block_label_given_tl } }
    \bool_if:nT
      {
        \l__block_label_boxed_bool
        && \dim_compare_p:n { \box_wd:N \l__block_one_label_box <= \linewidth } % TODO: is \linewidth correct?
      }
      {
        \dim_compare:nNnT
          { \box_wd:N \l__block_one_label_box } < \labelwidth
          {
            \hbox_set_to_wd:Nnn \l__block_one_label_box { \labelwidth }
              {
                \exp_after:wN \use_i:nn \l__block_item_align_tl
                \box_use_drop:N \l__block_one_label_box
                \exp_after:wN \use_ii:nn \l__block_item_align_tl
              }
          }
       \hbox_set:Nn \l__block_one_label_box
                    { \box_use_drop:N \l__block_one_label_box }
      }
    \dim_compare:nNnTF { \box_wd:N \l__block_one_label_box } > \labelwidth
      { \bool_set_true:N \l__block_long_label_bool }
      { \bool_set_false:N \l__block_long_label_bool }
    \hbox_gset:Nn \g__block_labels_box
      {
        \hbox_unpack_drop:N \g__block_labels_box
        \skip_horizontal:n { \itemindent - \labelsep - \labelwidth }
        \hbox_unpack_drop:N \l__block_one_label_box
        \skip_horizontal:n { \labelsep }
        \bool_if:NT \l__block_next_line_bool
          { \bool_if:NT \l__block_long_label_bool { \nobreak \hfil \break } }
        % version of \newline inside an hbox that will be unpacked
      }
    % \skip_set_eq:NN \parsep \l__block_item_parsep_skip TODO??? FMi
                                                           % what's that?
    \dim_set_eq:NN \parindent \listparindent
    \cs_set_eq:NN \__block_item_everypar: \__block_item_everypar_std:
  }
\box_new:N \l__block_one_label_box
\box_new:N \g__block_labels_box
\bool_new:N \l__block_long_label_bool
\cs_new_protected:Npn \__block_make_label_box:n #1
  {
    \hbox_set:Nn \l__block_one_label_box
      {
        \__kernel_list_label_begin:
        \__block_label_format:n
          {
            \bool_if:NT \l__block_label_strut_bool { \strut }
            \bool_if:NTF \l__block_compatibility_bool
                         \makelabel
                         \use:n
                 {#1}
          }
        \__kernel_list_label_end:
      }
  }
\cs_new_eq:NN \__kernel_list_label_begin: \prg_do_nothing:
\cs_new_eq:NN \__kernel_list_label_end:   \prg_do_nothing:
\cs_new_eq:NN \__block_item_everypar: \prg_do_nothing:
\AddToHook{para/begin}[lists]{\__block_item_everypar:}
\DeclareHookRule{para/begin}{lists}{after}{tagpdf}
\cs_new_protected:Npn \__block_item_everypar_std: {
    \__block_debug_typeout:n{item~ everypar \on@line }
    \legacy_if_set_false:n { @minipage }
    \legacy_if_gset_false:n { @newlist }
    \legacy_if:nT { @inlabel }
       {
         \legacy_if_gset_false:n { @inlabel }
         \box_if_empty:NT \g_para_indent_box { \kern - \itemindent }
         \para_omit_indent:
         \box_use_drop:N \g__block_labels_box
         \__kernel_list_label_after:
         \penalty \c_zero_int
       }
   \legacy_if:nTF { @nobreak }
       {
         \legacy_if_gset_false:n { @nobreak }
         \int_set:Nn \clubpenalty { 10000 }
       }
       {
         \int_set_eq:NN \clubpenalty \@clubpenalty
         \cs_set_eq:NN \__block_item_everypar: \prg_do_nothing:
       }
}
\cs_new_eq:NN \__kernel_list_label_after: \prg_do_nothing:
\skip_new:N \l__block_tmpa_skip
\skip_new:N \l__block_topsepadd_skip
\skip_new:N \l__block_effective_top_skip
\RenewDocumentCommand{\item}{ ={label}o }
  {
    \@inmatherr \item
    \tl_if_empty:oTF \__block_item_instance:n %%FMi?
      { \msg_error:nnn { __block } { item-in-nonlist } { \item[{#1}] } }
      {
        \legacy_if:nTF { @newlist }
          { \__kernel_list_item_begin: }
          { \__block_inter_item:            }
        \tl_if_novalue:nTF {#1}          % avoids reparsing label={}
          { \__block_item_instance:n { } }
          { \__block_item_instance:n {#1} }
        \legacy_if_gset_true:n { @inlabel }
        \ignorespaces
      }
  }
\cs_new_protected:Npn \__block_inter_item: {
  \legacy_if:nT { @inlabel }
                { \indent \par } % case of \item\item
   \mode_if_horizontal:T { \__block_skip_remove_last:
                           \__block_skip_remove_last: \par }
  \__kernel_list_item_end:
  \__kernel_list_item_begin:
  \addpenalty \@itempenalty
  \addvspace \itemsep
}
\cs_new_eq:NN \__kernel_list_item_begin: \prg_do_nothing:
\cs_new_eq:NN \__kernel_list_item_end:   \prg_do_nothing:
\cs_new:Npn \__block_recipe_flattened: {
  \let \__kernel_displayblock_beginpar_hmode:w \prg_do_nothing:
  \let \__kernel_displayblock_beginpar_vmode:  \prg_do_nothing:
  \let \__kernel_displayblock_begin:           \prg_do_nothing:
  \let \__kernel_displayblock_end:             \prg_do_nothing:
}

\cs_new:Npn \__block_recipe_figure:
{
  \cs_set_eq:NN \__kernel_displayblock_beginpar_hmode:w
                                              \__block_list_beginpar_hmode:N
  \cs_set_eq:NN \__kernel_displayblock_beginpar_vmode:
                                              \__block_list_beginpar_vmode:
  \cs_set_eq:NN \__kernel_displayblock_begin: \__block_figure_begin:
  \cs_set_eq:NN \__kernel_displayblock_end:   \__block_figure_end:
  \tl_if_empty:NTF \l__block_tag_name_tl
     { \tl_set:Nn    \l__tag_Figure_tag_tl {Figure}          }
     { \tl_set_eq:NN \l__tag_Figure_tag_tl \l__block_tag_name_tl }
}
\cs_new:Npn \__block_recipe_blockquote:
{
  \cs_set_eq:NN \__kernel_displayblock_beginpar_hmode:w
                                              \__block_list_beginpar_hmode:N
  \cs_set_eq:NN \__kernel_displayblock_beginpar_vmode:
                                              \__block_list_beginpar_vmode:
  \cs_set_eq:NN \__kernel_displayblock_begin: \__block_blockquote_begin:
  \cs_set_eq:NN \__kernel_displayblock_end:   \__block_blockquote_end:
  \tl_if_empty:NTF \l__block_tag_name_tl
     { \tl_set:Nn    \l__tag_Figure_tag_tl {Figure}          }
     { \tl_set_eq:NN \l__tag_Figure_tag_tl \l__block_tag_name_tl }
}
\cs_new:Npn \__block_recipe_list:
{
  \cs_set_eq:NN \__kernel_displayblock_beginpar_hmode:w
                                              \__block_list_beginpar_hmode:N
  \cs_set_eq:NN \__kernel_displayblock_beginpar_vmode:
                                              \__block_list_beginpar_vmode:
  \cs_set_eq:NN \__kernel_displayblock_begin: \__block_list_begin:
  \cs_set_eq:NN \__kernel_displayblock_end:   \__block_list_end:
  \cs_set_eq:NN \__kernel_list_item_begin:    \__block_list_item_begin:
  \cs_set_eq:NN \__kernel_list_item_end:      \__block_list_item_end:
  \tl_if_empty:NTF \l__block_tag_name_tl
     { \tl_set:Nn    \l__tag_L_tag_tl {L}               }
     { \tl_set_eq:NN \l__tag_L_tag_tl \l__block_tag_name_tl }
  \tl_if_empty:NTF \l__block_tag_class_tl
     { \tl_set:Nn    \l__tag_L_attr_class_tl {}                 }
     { \tl_set_eq:NN \l__tag_L_attr_class_tl \l__block_tag_class_tl }
}

\DeclareInstance{blockenv}{displayblock}{display}
{
  env-name       = displayblock,
  tag-name       = ,
  tag-class      = ,
  tagging-recipe = figure,
  level-counter  = ,
  level-increase = false,
  setup-code     = ,
  block-instance = displayblock ,
  list-instance  = ,
}
\DeclareInstance{blockenv}{displayblockflattened}{display}
{
  env-name       = displayblockflattened,
  tag-name       = ,
  tag-class      = ,
  tagging-recipe = flattened,
  level-counter  = ,
  level-increase = false,
  setup-code     = ,
  block-instance = displayblock ,
  list-instance  = ,
}
\tag_if_active:T {
  \tagpdfsetup{add-new-tag={tag=quote,role=Figure}}
  \tagpdfsetup{add-new-tag={tag=quotation,role=Figure}}
}
\DeclareInstance{blockenv}{quotation}{display}
{
  env-name       = quotation,
  tag-name       = quotation,
  tag-class      = ,
  tagging-recipe = blockquote,
  level-counter  = ,
  level-increase = true,
  setup-code     = ,
  block-instance = quotationblock ,
  list-instance  =  ,
}
\DeclareInstance{blockenv}{quote}{display}
{
  env-name       = quote,
  tag-name       = quote,
  tag-class      = ,
  tagging-recipe = blockquote,
  level-counter  = ,
  level-increase = true,
  setup-code     = ,
  block-instance = quoteblock ,
  list-instance  =  ,
}
\tag_if_active:T {
  \tagpdfsetup{add-new-tag={tag=verbatim,role=Figure}}
}
\DeclareInstance{blockenv}{verbatim}{display}
{
  env-name       = verbatim,
  tag-name       = verbatim,
  tag-class      = ,
  tagging-recipe = figure,
  level-counter  = ,
  level-increase = false,
  setup-code     = ,
  block-instance = displayblock ,
  list-instance  = ,
}
\DeclareInstance{blockenv}{itemize}{display}
{
  env-name       = itemize,
  tag-name       = itemize,
  tag-class      = itemize,
  tagging-recipe = list,
  level-counter  = \@itemdepth,
  level-increase = true,
  max-levels     = 3,
  setup-code     = ,
  block-instance = list ,
  list-instance  = itemize ,
}
\DeclareInstance{blockenv}{enumerate}{display}
{
  env-name       = enumerate,
  tag-name       = enumerate,
  tag-class      = enumerate,
  tagging-recipe = list,
  level-counter  = \@enumdepth,
  level-increase = true,
  max-levels     = 3,
  setup-code     = ,
  block-instance = list ,
  list-instance  = enum ,
}

\DeclareInstance{blockenv}{description}{display}
{
  env-name       = description,
  tag-name       = description,
  tag-class      = description,
  tagging-recipe = list,
  level-counter  = ,
  level-increase = true,
  setup-code     = ,
  block-instance = list ,
  list-instance  = description ,
}
\DeclareInstance{blockenv}{list}{display}
{
  env-name       = list,
  tag-name       = list,
  tag-class      = ,
  tagging-recipe = list,
  level-counter  = ,
  level-increase = true,
  setup-code     = \legacylistsetupcode ,
  block-instance = list ,
  list-instance  = legacy ,
}
\setcounter{maxblocklevels}{6}
\DeclareInstance{block}{displayblock-0}{display}
  {
    leftmargin      = 0pt ,
    parindent       = 0pt ,
  }
\DeclareInstanceCopy{block}{displayblock-1}{displayblock-0}
\DeclareInstanceCopy{block}{displayblock-2}{displayblock-0}
\DeclareInstanceCopy{block}{displayblock-3}{displayblock-0}
\DeclareInstanceCopy{block}{displayblock-4}{displayblock-0}
\DeclareInstanceCopy{block}{displayblock-5}{displayblock-0}
\DeclareInstanceCopy{block}{displayblock-6}{displayblock-0}
\DeclareInstance{block}{quoteblock-1}{display}
  { rightmargin = \KeyValue{leftmargin} }
\DeclareInstanceCopy{block}{quoteblock-2}{quoteblock-1}
\DeclareInstanceCopy{block}{quoteblock-3}{quoteblock-1}
\DeclareInstanceCopy{block}{quoteblock-4}{quoteblock-1}
\DeclareInstanceCopy{block}{quoteblock-5}{quoteblock-1}
\DeclareInstanceCopy{block}{quoteblock-6}{quoteblock-1}
\DeclareInstance{block}{quotationblock-1}{display}
  { parindent = 1.5em , rightmargin = \KeyValue{leftmargin} }
\DeclareInstanceCopy{block}{quotationblock-2}{quotationblock-1}
\DeclareInstanceCopy{block}{quotationblock-3}{quotationblock-1}
\DeclareInstanceCopy{block}{quotationblock-4}{quotationblock-1}
\DeclareInstanceCopy{block}{quotationblock-5}{quotationblock-1}
\DeclareInstanceCopy{block}{quotationblock-6}{quotationblock-1}
\DeclareInstance{block}{list-1}{display}{
}
\DeclareInstance{block}{list-2}{display}{}
\DeclareInstance{block}{list-3}{display}{}
\DeclareInstance{block}{list-4}{display}{}
\DeclareInstance{block}{list-5}{display}{}
\DeclareInstance{block}{list-6}{display}{}
\DeclareInstance{list}{itemize-1}{std}
  {
    item-instance = basic ,
    item-label = \labelitemi ,
  }
\DeclareInstance{list}{itemize-2}{std}
  {
    item-instance = basic ,
    item-label = \labelitemii ,
  }
\DeclareInstance{list}{itemize-3}{std}
  {
    item-instance = basic ,
    item-label = \labelitemiii ,
  }
\DeclareInstance{list}{itemize-4}{std}
  {
    item-instance = basic ,
    item-label = \labelitemiv ,
  }
\DeclareInstance{list}{enum-1}{std}
  {
    item-instance = basic ,
    item-label = \labelenumi ,
    counter = enumi ,
  }
\DeclareInstance{list}{enum-2}{std}
  {
    item-instance = basic ,
    item-label = \labelenumii ,
    counter = enumii ,
  }
\DeclareInstance{list}{enum-3}{std}
  {
    item-instance = basic ,
    item-label = \labelenumiii ,
    counter = enumiii ,
  }
\DeclareInstance{list}{enum-4}{std}
  {
    item-instance = basic ,
    item-label = \labelenumiv ,
    counter = enumiv ,
  }
\DeclareInstance{list}{legacy}{std} {
  item-instance = basic ,
  compatibility = true ,
}
\DeclareInstance{list}{description}{std} {
  item-instance = description ,
}
  %

\DeclareInstance{item}{basic}{std}
  {
    label-align = right ,
  }
\DeclareInstance{item}{description}{std}
  {
    label-format = \normalfont\bfseries #1 ,
  }

\tag_if_active:T {
\cs_set:Npn \__block_list_beginpar_vmode: {
  \int_gincr:N \g__tag_para_begin_int
  \tag_struct_begin:n {tag=P}
  \bool_if:NT \l__tag_para_show_bool
      {
       \tag_mc_begin:n {artifact}
       \llap {\color_select:n {green}\tiny \PARALABEL\int_use:N \g__tag_para_begin_int \ }
       \tag_mc_end:
     }
}
\cs_set:Npn \__block_list_beginpar_hmode:N #1 {
   \tag_mc_end: \tagpdfparaOff \par \tagpdfparaOn
 }
\cs_set:Npn \__kernel_displayblock_beginpar_vmode: {}
\cs_set:Npn \__kernel_displayblock_beginpar_hmode:w {}
\cs_set:Npn \__kernel_displayblock_doendpe: {
     \bool_if:NT \l__tag_para_bool
       {
         \legacy_if:nT { @endpe }
           {
             \__block_debug_typeout:n{flattened=\legacy_if:nTF { @endpeflattened }{true}{false} }
             \legacy_if:nF { @endpeflattened }
               {
                 \__block_debug_typeout:n{Structure-end~ P~ after~ list \on@line }
                 \int_gincr:N \g__tag_para_end_int
                 \bool_if:NT \l__tag_para_show_bool
                      { \tag_mc_begin:n{artifact}
                        \rlap{\color_select:n{red}\tiny\ endpe-\int_use:N\g__tag_para_end_int}
                        \tag_mc_end:
                      }
                 \tag_struct_end:
               }
           }
      }
}
\RemoveFromHook{para/begin}[tagpdf]
\AddToHook{para/begin}[tagpdf]{
  \bool_if:NT \l__tag_para_bool {
       %\ShowTagging{struct-stack}
       \legacy_if:nF { @inlabel }
         {
          \__block_debug_typeout:n{@endpe = \legacy_if:nTF { @endpe }{true}{false}}
          \legacy_if:nTF { @endpeflattened }
              \@kernel@tag@para@endpe
              { \legacy_if:nF { @endpe } \@kernel@tag@para@endpe }
          \tag_mc_begin:n {}
         }
     }
}

\cs_set:Npn \@kernel@tag@para@endpe
             {
               \int_gincr:N \g__tag_para_begin_int
               \tag_struct_begin:n
                   {
                      tag=\l__tag_para_tag_tl
                     ,attribute-class=\l_tag_para_attr_class_tl
                   }
               \bool_if:NT \l__tag_para_show_bool
                   {
                    \tag_mc_begin:n {artifact}
                    \llap {\color_select:n {green}\tiny
                           \PARALABEL\int_use:N \g__tag_para_begin_int \ }
                    \tag_mc_end:
                  }
            }

\def\PARALABEL{NP-}
\cs_set:Npn \__kernel_list_label_after: {
   \bool_if:NT \l__tag_para_bool
     {
       \int_gincr:N \g__tag_para_begin_int
       \tag_struct_begin:n {
          tag=\l__tag_para_tag_tl
         ,attribute-class=\l_tag_para_attr_class_tl
       }
       \bool_if:NT \l__tag_para_show_bool
            {
              \tag_mc_begin:n {artifact}
              \llap {\color_select:n {blue}\tiny Li-\int_use:N \g__tag_para_begin_int \ }
              \tag_mc_end:
            }
       \tag_mc_begin:n {tag=P}
     }
}
\cs_new:Npn \__block_figure_begin: { \tagstructbegin{tag=\l__tag_Figure_tag_tl} \ShowTagging{struct-stack}  }
\cs_new:Npn \__block_figure_end: {
  \__block_debug_typeout:n{block-end}
  \ShowTagging{struct-stack}
  \legacy_if:nT { @endpe }
    {
      \int_gincr:N \g__tag_para_end_int
      \tagstructend
    }
  \tagstructend               % end Figure
  \ShowTagging{struct-stack}
}
\cs_new:Npn \__block_blockquote_begin: {
  \tagstructbegin{tag=\l__tag_Figure_tag_tl} \tagstructbegin{tag=BlockQuote}
}
\cs_new:Npn \__block_blockquote_end: {
  \__block_debug_typeout:n{block-end}
  \ShowTagging{struct-stack}
  \legacy_if:nT { @endpe }
         {
           \int_gincr:N \g__tag_para_end_int
           \tagstructend
         }
         \tagstructend               % end BlockQuote
         \tagstructend               % end Figure
         \ShowTagging{struct-stack}
}
\tl_new:N  \l__tag_L_tag_tl
\tl_set:Nn \l__tag_L_tag_tl {L}

\tl_new:N\l__tag_L_attr_class_tl
\tl_set:Nn \l__tag_L_attr_class_tl {list}
\tag_if_active:T
{
  \tagpdfsetup
      {
        % default if unknown
        newattribute = {list}{/O /List /ListNumbering/None},
        newattribute = {itemize}{/O /List /ListNumbering/Unordered},
        newattribute = {enumerate}{/O /List /ListNumbering/Ordered},
        newattribute = {description}{/O /List /ListNumbering/Description},
      }
}
\def\LItag{LI}
\cs_set:Npn \__block_list_begin: {
  \tagstructbegin
      {
         tag=\l__tag_L_tag_tl
        ,attribute-class=\l__tag_L_attr_class_tl
      }
}
\cs_set:Npn \__block_list_item_begin: { \tagstructbegin{tag=\LItag} }
\cs_set:Npn \__kernel_list_label_begin: {
       \tagstructbegin{tag=Lbl}
       \tagmcbegin{tag=Lbl}
}
\cs_set:Npn \__kernel_list_label_end: {
  \tagmcend                                    % end mc-Lbl or artifact
         \tagstructend   % end   Lbl
  \tagstructbegin{tag=\LBody}
}
\def\LBody{LBody}
\cs_set:Npn \__block_list_item_end: {
  \legacy_if:nT { @endpe }
    {
      \int_gincr:N \g__tag_para_end_int
      \tagstructend
    }
  \tagstructend \tagstructend   % end LBody, LI
}
\cs_set:Npn \__block_list_end: {
  \ShowTagging{struct-stack}
  \legacy_if:nT { @endpe }
    {
      \int_gincr:N \g__tag_para_end_int
      \tagstructend
    }
  \tagstructend\tagstructend  % end LBody, LI
  \tagstructend               % end L
}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\endinput
%%
%% End of file `l3lists2.sty'.
