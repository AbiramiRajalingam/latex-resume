% \iffalse meta-comment
%
%% File: latex-lab-socket.dtx
% Copyright (C) 2023 The LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
%
% The development version of the bundle can be found below
%
%    https://github.com/latex3/latex2e/required/latex-lab
%
% for those people who are interested or want to report an issue.
%
%<*driver>
\documentclass{l3doc}
\EnableCrossrefs
\CodelineIndex
\begin{document}
  \DocInput{latex-lab-socket.dtx}
\end{document}
%</driver>
%
% \fi
%
%
% \title{The \texttt{latex-lab-testphase-socket} code\thanks{}}
% \author{Frank Mittelbach, \LaTeX{} Project}
%
% \maketitle
%
% \newcommand\fmi[1]{\begin{quote} TODO: \itshape #1\end{quote}}
% \newcommand\NEW[1]{\marginpar{\mbox{}\hfill\fbox{New: #1}}}
% \providecommand\pkg[1]{\texttt{#1}}
%
% \begin{abstract}
% \end{abstract}
%
% \section{Introduction}
%
%    This code implements sockets which are places in the code into
%    which predeclared chunks of code can be placed. Both the sockets
%    and the code chunks are \enquote{named} and each socket is
%    assigned exactly one code chunk.
%
%
%
%
% \StopEventually{\setlength\IndexMin{200pt}  \PrintIndex  }
%
%
% \section{The Implementation}
%
%    The implementation of the socket mechanism should be redone and we
%    should probably store the different code chunks in a property
%    list so that we can have a decent \cs{ShowSocket} command the shows
%    the available alternatives.
%
%    \begin{macrocode}
%<*code>
%<@@=socket>
%    \end{macrocode}
%
% \subsection{File declaration}
%
%    \begin{macrocode}
\ProvidesExplPackage {latex-lab-testphase-socket} {2023-06-15} {0.1a}
  {sockets (or replaceable code blocks)}
%    \end{macrocode}
%
% \subsection{The L3 layer commands}
%
%  \begin{macro}{\socket_new:nn}
%    
%    Declaring a socket creates a str to hold the name (a pointer) to the
%    code that should be used when the socket is executed, and an integer to
%    hold the number of arguments of that socket.  Initially, an
%    ``empty'' code chunk is created and assigned so the socket
%    does nothing by default other than swallowing its arguments (if any).
%    \begin{macrocode}
\cs_new_protected:Npn \socket_new:nn #1 #2 {
  \str_if_exist:cTF { g_@@_#1_code_str }
      {
        \errmessage { Socket~ '#1'~ already~ declared! }
      }
      {
        \str_new:c { g_@@_#1_code_str }
        \int_const:cn { c_@@_#1_args_int } {#2}
        \socket_new_code:nnn {#1} { do_nothing } { }
        \socket_assign_code:nn {#1} { do_nothing }
      }
}
%    \end{macrocode}
%  \end{macro}
%  
%  
%  
%  \begin{macro}{\socket_new_code:nnn}
%    
%    Declaring a code for a socket is just making a definition, taking
%    the number of arguments from the saved int.
%    \begin{macrocode}
\cs_new_protected:Npn \socket_new_code:nnn #1 #2 #3 {
  \str_if_exist:cTF { g_@@_#1_code_str }
      {
        \cs_generate_from_arg_count:cNnn
           { _@@_#1_code_#2:w }
           \cs_new_protected:Npn
           { \int_use:c { c_@@_#1_args_int } }
           {#3}
      }
      {
        \errmessage { Socket~ '#1'~ not~ declared! }
      }
}
%    \end{macrocode}
%  \end{macro}
%  
%  
%  
%  \begin{macro}{\socket_assign_code:nn}
%    
%    Assigning stored code to a socket just changes the name in
%    the socket string.
%    \begin{macrocode}
\cs_new_protected:Npn \socket_assign_code:nn #1 #2 {
  \str_if_exist:cTF { g_@@_#1_code_str }
      {
        \cs_if_exist:cTF { _@@_#1_code_#2:w }
          {
            \str_gset:cn { g_@@_#1_code_str } {#2}
          }
          {
            \errmessage { Socket~ instance~ '#2'~ for~ the~ socket~ '#1'~ not~ declared! }
          }
      }
      {
        \errmessage { Socket~ '#1'~ not~ declared! }
      }
}
%    \end{macrocode}
%  \end{macro}
%  
%  
%  \begin{macro}{\socket_use:n}
%    
%    And using it is more or less a \cs{use:c} so very lightweight. We do not add a
%    runtime check for speed reasons!
%    \begin{macrocode}
\cs_new_protected:Npn \socket_use:n #1 {
  \use:c { _@@_#1_code_ \str_use:c { g_@@_#1_code_str } :w }
}
%    \end{macrocode}
%  \end{macro}
%  
% \subsection{The \LaTeXe{} interface commands}
%
%  \begin{macro}{\NewSocket,\DeclareSocketCode,
%                \AssignSocketCode,\UseSocket}
%    
%    \begin{macrocode}
\cs_new_eq:NN \NewSocket         \socket_new:nn 
\cs_new_eq:NN \DeclareSocketCode \socket_new_code:nnn
\cs_new_eq:NN \AssignSocketCode  \socket_assign_code:nn
\cs_new_eq:NN \UseSocket         \socket_use:n
%    \end{macrocode}
%  \end{macro}
%  
%
%    \begin{macrocode}
%<@@=>
%</code>
%    \end{macrocode}
%
% \Finale
%
