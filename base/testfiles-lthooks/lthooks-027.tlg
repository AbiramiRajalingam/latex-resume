This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: Using stuff once (expect 'aaa bbb'):
============================================================
<<< Hook: 'A'
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   cmd_hook: N
...   # of arguments: 0
... Default rules:
...   None
... Rules:
...   None
... Code chunks:
...   next-only empty
...   'top level' -> \message {aaa}
... Execution order:
...   Empty
>>>
aaa bbb
============================================================
============================================================
TEST 2:  Braces in hook names (expect 'aaa bbb'): 
============================================================
<<< Hook: '-{hook}-'(<- ' -{hook}- ')
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   cmd_hook: N
...   # of arguments: 0
... Default rules:
...   None
... Rules:
...   None
... Code chunks:
...   next-only empty
...   'top level' -> \message {aaa}
... Execution order:
...   Empty
>>>
aaa bbb
============================================================
============================================================
TEST 3:  Macro with argument (expect 'my-bar.xxx' and 'after'): 
============================================================
(my-bar.xxx
File: my-bar.xxx
)
File: after
============================================================
============================================================
TEST 4:  Unicode hook names (expect 'aaa bbb'): 
============================================================
<<< Hook: 'gr^^c3^^bc^^c3^^9fe'(<- ' gr^^c3^^bc^^c3^^9fe ')
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   cmd_hook: N
...   # of arguments: 0
... Default rules:
...   None
... Rules:
...   None
... Code chunks:
...   next-only empty
...   'top level' -> \message {aaa}
... Execution order:
...   Empty
>>>
aaa bbb
============================================================
============================================================
TEST 5:  Macros in hook names (expect 'aaa bbb'): 
============================================================
<<< Hook: '^^e9^^89^^a4'(<- ' ^^e9^^89^^a4')
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   cmd_hook: N
...   # of arguments: 0
... Default rules:
...   None
... Rules:
...   None
... Code chunks:
...   next-only empty
...   'top level' -> \message {aaa}
... Execution order:
...   Empty
>>>
aaa bbb
============================================================
============================================================
TEST 6:  Spaces aren't trimmed if hidden in a macro (expect 'aaa bbb'): 
============================================================
<<< Hook: ' <-with spaces-> '(<- '  <-with spaces-> ')
... Attributes:
...   deprecated_generic: N
...   generic: N
...   declared: Y
...   structure_exist: Y
...   usable: Y
...   disabled: N
...   empty: N
...   reversed: N
...   cmd_hook: N
...   # of arguments: 0
... Default rules:
...   None
... Rules:
...   None
... Code chunks:
...   next-only empty
...   'top level' -> \message {aaa}
... Execution order:
...   Empty
>>>
aaa bbb
============================================================
(lthooks-027.aux)
