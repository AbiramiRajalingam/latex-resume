This is a generated file for the l3build validation system.
Don't change this file in any respect.
**** Add to hook xxx (label1) on input line ... <-  foo1
**** Add to hook xxx (label2) on input line ... <-  foo2
**** Add to hook xxx (label3) on input line ... <-  foo3
The property list \g__hook_xxx_code_prop contains the pairs (without outer
braces):
>  {label1}  =>  { foo1}
>  {label2}  =>  { foo2}
>  {label3}  =>  { foo3}.
The sequence \g__hook_all_seq contains the items (without outer braces):
>  {begindocument}
>  {enddocument}
>  {rmfamily}
>  {sffamily}
>  {ttfamily}
>  {defaultfamily}
>  {documentclass}
>  {begindocument/before}
>  {begindocument/end}
>  {enddocument/afterlastpage}
>  {enddocument/afteraux}
>  {enddocument/info}
>  {enddocument/end}
>  {shipout/before}
>  {shipout/foreground}
>  {shipout/background}
>  {shipout/firstpage}
>  {shipout/lastpage}
>  {xxx}.
The hook xxx contains the rules:
>  {label2|label1}  =>  {<-}
>  {label3|label1}  =>  {>} (default)
>  {label3|label2}  =>  {<}
Update code for hook 'begindocument' on input line ...:
Update code for hook 'enddocument' on input line ...:
Update code for hook 'rmfamily' on input line ...:
Update code for hook 'sffamily' on input line ...:
Update code for hook 'ttfamily' on input line ...:
Update code for hook 'defaultfamily' on input line ...:
Update code for hook 'documentclass' on input line ...:
Code labels for sorting:
 legacy
Data structure for label rules:
 legacy = 0 -> 
Handled code for legacy
Update code for hook 'begindocument/before' on input line ...:
Update code for hook 'begindocument/end' on input line ...:
Update code for hook 'enddocument/afterlastpage' on input line ...:
Update code for hook 'enddocument/afteraux' on input line ...:
Update code for hook 'enddocument/info' on input line ...:
  normal rule kernel/warnings|kernel/filelist: > found
Code labels for sorting:
 kernel/filelist and kernel/warnings
Data structure for label rules:
 kernel/filelist = 0 -> kernel/warnings
 kernel/warnings = 1 -> 
Handled code for kernel/filelist
Handled code for kernel/warnings
Update code for hook 'enddocument/end' on input line ...:
Update code for hook 'shipout/before' on input line ...:
Update code for hook 'shipout/foreground' on input line ...:
Update code for hook 'shipout/background' on input line ...:
Update code for hook 'shipout/firstpage' on input line ...:
Code labels for sorting:
 l3backend-dvips
Data structure for label rules:
 l3backend-dvips = 0 -> 
Handled code for l3backend-dvips
Update code for hook 'shipout/lastpage' on input line ...:
Update code for hook 'xxx' on input line ...:
  normal rule label2|label1: <- found
---> Drop 'label2' code from \g__hook_xxx_code_prop because of 'label1'
 default rule label3|label1: > found
  normal rule label3|label2: < found
Code labels for sorting:
 label1, label2 and label3
Data structure for label rules:
 label1 = 0 -> label3
 label2 = 1 -> 
 label3 = 1 -> label2
Handled code for label1
Handled code for label3
Handled code for label2
All initialized (non-empty) hooks:
 documentclass -> \ifx \@normalsize \@undefined \let \@normalsize \normalsize \fi \g__hook_documentclass_next_code_tl  
 enddocument/info -> \@dofilelist \@enddocument@kernel@warnings \g__hook_enddocument/info_next_code_tl  
 shipout/firstpage -> \bool_lazy_and:nnT {\cs_if_exist_p:N \g__kernel_backend_header_bool }{\g__kernel_backend_header_bool }{\__kernel_backend_literal:n {header=l3backend-dvips.pro}}\g__hook_shipout/firstpage_next_code_tl  
 xxx ->  foo1 foo3\g__hook_xxx_next_code_tl  
Update code for hook 'begindocument' on input line ...:
Update code for hook 'enddocument' on input line ...:
Update code for hook 'rmfamily' on input line ...:
Update code for hook 'sffamily' on input line ...:
Update code for hook 'ttfamily' on input line ...:
Update code for hook 'defaultfamily' on input line ...:
Update code for hook 'documentclass' on input line ...:
Code labels for sorting:
 legacy
Data structure for label rules:
 legacy = 0 -> 
Handled code for legacy
Update code for hook 'begindocument/before' on input line ...:
Update code for hook 'begindocument/end' on input line ...:
Update code for hook 'enddocument/afterlastpage' on input line ...:
Update code for hook 'enddocument/afteraux' on input line ...:
Update code for hook 'enddocument/info' on input line ...:
  normal rule kernel/warnings|kernel/filelist: > found
Code labels for sorting:
 kernel/filelist and kernel/warnings
Data structure for label rules:
 kernel/filelist = 0 -> kernel/warnings
 kernel/warnings = 1 -> 
Handled code for kernel/filelist
Handled code for kernel/warnings
Update code for hook 'enddocument/end' on input line ...:
Update code for hook 'shipout/before' on input line ...:
Update code for hook 'shipout/foreground' on input line ...:
Update code for hook 'shipout/background' on input line ...:
Update code for hook 'shipout/firstpage' on input line ...:
Code labels for sorting:
 l3backend-dvips
Data structure for label rules:
 l3backend-dvips = 0 -> 
Handled code for l3backend-dvips
Update code for hook 'shipout/lastpage' on input line ...:
Update code for hook 'xxx' on input line ...:
  normal rule label2|label1: <- found
---> Drop 'label2' code from \g__hook_xxx_code_prop because of 'label1'
Code labels for sorting:
 label1, label2 and label3
Data structure for label rules:
 label1 = 0 -> 
 label2 = 0 -> 
 label3 = 0 -> 
Handled code for label1
Handled code for label2
Handled code for label3
All initialized (non-empty) hooks:
 documentclass -> \ifx \@normalsize \@undefined \let \@normalsize \normalsize \fi \g__hook_documentclass_next_code_tl  
 enddocument/info -> \@dofilelist \@enddocument@kernel@warnings \g__hook_enddocument/info_next_code_tl  
 shipout/firstpage -> \bool_lazy_and:nnT {\cs_if_exist_p:N \g__kernel_backend_header_bool }{\g__kernel_backend_header_bool }{\__kernel_backend_literal:n {header=l3backend-dvips.pro}}\g__hook_shipout/firstpage_next_code_tl  
 xxx ->  foo1 foo3\g__hook_xxx_next_code_tl  
