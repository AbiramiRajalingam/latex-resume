% for getting the examples in the code really ...

\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff

\documentclass{article}

\input{regression-test}

% Next lines contain sufficient definition for the `\ShowHook` command
% once it was also used for testing. It is named `\OldShowHook`.
% It allows to easily make the difference between old and new design,
% with a minimum of effort.
% This might be removed in a forthcoming release.
\ExplSyntaxOn
\makeatletter
\cs_set_protected:Npn \OldShowHook { \hook_show_old:n }
\cs_set_protected:Npn \hook_show_old:n #1
  {
    \cs_set_eq:NN \__hook_test_log_cmd:x \iow_term:x
    \__hook_normalize_hook_args:Nn \__hook_test_log:nN {#1} \tl_show:x
  }
\cs_new_protected:Npn \__hook_test_log:nN #1 #2
  {
    \__hook_if_deprecated_generic:nT {#1}
      {
        \__hook_deprecated_generic_warn:n {#1}
        \__hook_do_deprecated_generic:Nn \__hook_test_log:nN {#1} #2
        \exp_after:wN \use_none:nnnnnnnnn \use_none:nnnnn
      }
    \__hook_preamble_hook:n {#1}
    \__hook_test_log_cmd:x
      {
        ^^J ->~The~
        \__hook_if_generic:nT {#1} { generic~ }
        hook~'#1'
        \__hook_if_disabled:nF {#1}
          {
            \exp_args:Nnf \__hook_test_print_args:nn {#1}
              {
                \int_eval:n
                  { \str_count:e { \__hook_parameter:n {#1} } / 3 }
              }
          }
        :
      }
    \__hook_if_usable:nF {#1}
      { \__hook_test_log_line:x { The~hook~is~not~declared. } }
    \__hook_if_disabled:nT {#1}
      { \__hook_test_log_line:x { The~hook~is~disabled. } }
    \hook_if_empty:nTF {#1}
      { #2 { The~hook~is~empty } }
      {
        \__hook_test_log_line:x { Code~chunks: }
        \prop_if_empty:cTF { g__hook_#1_code_prop }
          { \__hook_test_log_line_indent:x { --- } }
          {
            \prop_map_inline:cn { g__hook_#1_code_prop }
              {
                \exp_after:wN \cs_set:Npn \exp_after:wN \__hook_tmp:w
                  \c__hook_nine_parameters_tl {##2}
                \__hook_test_log_line_indent:x
                  { ##1~->~\cs_replacement_spec:N \__hook_tmp:w }
              }
          }
%    \end{macrocode}
%
%    If there is code in the |top-level| token list, print it:
%    \begin{macrocode}
        \__hook_test_log_line:x
          {
            Document-level~(top-level)~code
            \__hook_if_usable:nT {#1}
              { ~(executed~\__hook_if_reversed:nTF {#1} {first} {last} ) } :
          }
        \__hook_test_log_line_indent:x
          {
            \__hook_cs_if_empty:cTF { __hook_toplevel~#1 }
              { --- }
              { -> ~ \cs_replacement_spec:c { __hook_toplevel~#1 } }
          }
%    \end{macrocode}
%
%    \begin{macrocode}
        \__hook_test_log_line:x { Extra~code~for~next~invocation: }
        \__hook_test_log_line_indent:x
          {
            \__hook_cs_if_empty:cTF { __hook_next~#1 }
              { --- }
%    \end{macrocode}
%
%    If the token list is not empty we want to display it but without
%    the first tokens (the code to clear itself) so we call a helper
%    command to  get rid of them.
%    \begin{macrocode}
              {
                -> ~ \exp_last_unbraced:Nf \__hook_log_next_code:w
                  { \cs_replacement_spec:c { __hook_next~#1 } }
              }
          }
%    \end{macrocode}
%
%   Loop through the rules in a hook and for every rule found, print it.
%   If no rule is there, print |---|.  The boolean \cs{l__hook_tmpa_bool}
%   here indicates if the hook has no rules.
%    \begin{macrocode}
        \__hook_test_log_line:x { Rules: }
        \bool_set_true:N \l__hook_tmpa_bool
        \__hook_list_rules:nn {#1}
          {
            \bool_set_false:N \l__hook_tmpa_bool
            \__hook_test_log_line_indent:x
              {
                ##2~ with~
                \str_if_eq:nnT {##3} {??} { default~ }
                relation~ ##1
              }
          }
        \bool_if:NT \l__hook_tmpa_bool
          { \__hook_test_log_line_indent:x { --- } }
%    \end{macrocode}
%
%   When the hook is declared (that is, the sorting algorithm is applied
%   to that hook) and not empty
%    \begin{macrocode}
        \bool_lazy_and:nnTF
            { \__hook_if_usable_p:n {#1} }
            { ! \hook_if_empty_p:n {#1} }
          {
            \__hook_test_log_line:x
              {
                Execution~order
                \bool_if:NTF \l__hook_tmpa_bool
                  { \__hook_if_reversed:nT {#1} { ~(after~reversal) } }
                  { ~(after~
                    \__hook_if_reversed:nT {#1} { reversal~and~ }
                    applying~rules)
                  } :
              }
            #2 % \tl_show:n
              {
                \@spaces
                \clist_if_empty:cTF { g__hook_#1_labels_clist }
                  { --- }
                  { \clist_use:cn { g__hook_#1_labels_clist } { ,~ } }
              }
          }
          {
            \__hook_test_log_line:x { Execution~order: }
            #2
              {
                \@spaces Not~set~because~the~hook~ \__hook_if_usable:nTF {#1}
                  { code~pool~is~empty }
                  { is~\__hook_if_disabled:nTF {#1} {disabled} {undeclared} }
              }
          }
      }
  }
\cs_new:Npn \__hook_test_print_args:nn #1 #2
  {
    \int_compare:nNnT {#2} > { 0 }
      {
        \__hook_if_declared:nT {#1} { \use_none:nnn }
        \__hook_if_cmd_hook:nT {#1}
          { \use_i:nnn { ~ (unknown ~ } }
        \use:n { ~ (#2 ~ }
        argument \int_compare:nNnT {#2} > { 1 } { s } )
      }
  }
\cs_new_protected:Npn \__hook_test_log_line:x #1
  { \__hook_test_log_cmd:x { >~#1 } }
\cs_new_protected:Npn \__hook_test_log_line_indent:x #1
  { \__hook_test_log_cmd:x { >~\@spaces #1 } }
\makeatother
\ExplSyntaxOff

% Record the actual `\ShowHook`
\ExplSyntaxOn
\cs_set_eq:NN \new_hook_log:n \hook_log:n
\cs_set_eq:NN \new_hook_show:n \hook_show:n
\ExplSyntaxOff

% There a are many different hook profiles.

\START

\typeout{========== UNDECLARED}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== + TOP LEVEL}
\AddToHook{HOOK NAME 0}{\typeout{[TOP LEVEL]}}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== + LABEL 1}
\AddToHook{HOOK NAME 0}[LABEL 1]{\typeout{[code 1]}}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== + LABEL 2}
\AddToHook{HOOK NAME 0}[LABEL 2]{\typeout{[code 2]}}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== + LABEL 3}
\AddToHook{HOOK NAME 0}[LABEL 3]{\typeout{[code 3]}}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== + NEXT}
\AddToHookNext{HOOK NAME 0}{\typeout{[Next only]}}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== LABEL 3 < LABEL 1}
\DeclareHookRule{HOOK NAME 0}{LABEL 3}{before}{LABEL 1}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}
\typeout{========== DEFAULT LABEL 2 > LABEL 3}
\DeclareDefaultHookRule{LABEL 2}{after}{LABEL 3}
\OldShowHook{HOOK NAME 0}
\ShowHook{HOOK NAME 0}
\UseHook{HOOK NAME 0}

\typeout{============================================}

\typeout{========== UNDECLARED}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== DECLARED EMPTY}
\NewHook{HOOK NAME}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== + TOP LEVEL}
\AddToHook{HOOK NAME}{\typeout{[TOP LEVEL]}}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== + LABEL 1}
\AddToHook{HOOK NAME}[LABEL 1]{\typeout{[code 1]}}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== + LABEL 2}
\AddToHook{HOOK NAME}[LABEL 2]{\typeout{[code 2]}}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== + LABEL 3}
\AddToHook{HOOK NAME}[LABEL 3]{\typeout{[code 3]}}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== + NEXT}
\AddToHookNext{HOOK NAME}{\typeout{[Next only]}}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== LABEL 3 < LABEL 1}
\DeclareHookRule{HOOK NAME}{LABEL 3}{before}{LABEL 1}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}
\typeout{========== DEFAULT LABEL 2 > LABEL 3}
\DeclareDefaultHookRule{LABEL 2}{after}{LABEL 3}
\OldShowHook{HOOK NAME}
\ShowHook{HOOK NAME}
\UseHook{HOOK NAME}

\typeout{============================================}

\typeout{========== UNDECLARED}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== DECLARED REVERSED}
\NewReversedHook{EMAN KOOH}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + TOP LEVEL}
\AddToHook{EMAN KOOH}{\typeout{[TOP LEVEL]}}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + LABEL 1}
\AddToHook{EMAN KOOH}[LABEL 1]{\typeout{[code 1]}}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + LABEL 2}
\AddToHook{EMAN KOOH}[LABEL 2]{\typeout{[code 2]}}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + LABEL 3}
\AddToHook{EMAN KOOH}[LABEL 3]{\typeout{[code 3]}}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + NEXT}
\AddToHookNext{EMAN KOOH}{\typeout{[Next only]}}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + LABEL 3 < LABEL 1}
\DeclareHookRule{EMAN KOOH}{LABEL 3}{before}{LABEL 1}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}
\typeout{========== + DEFAULT LABEL 2 > LABEL 3}
\DeclareDefaultHookRule{LABEL 2}{after}{LABEL 3}
\OldShowHook{EMAN KOOH}
\ShowHook{EMAN KOOH}
\UseHook{EMAN KOOH}

\typeout{============================================}

\typeout{UNKNOWN ENVIRONMENT}
\OldShowHook{env/lthooks.regression test/before}
\ShowHook{env/lthooks.regression test/before}
\typeout{CREATING ENVIRONMENT}
\NewDocumentEnvironment{lthooks.regression test}{}{}{}
\OldShowHook{env/lthooks.regression test/before}
\ShowHook{env/lthooks.regression test/before}

\typeout{============================================}

\typeout{========== GENERIC HOOK}

\OldShowHook{GENERIC}
\ShowHook{GENERIC}
\AddToHook{GENERIC}[LABEL]{\typeout{[CODE]}}
\OldShowHook{GENERIC}
\ShowHook{GENERIC}
\UseHook{GENERIC}
\typeout{========== ACTIVATE GENERIC HOOK}
\ActivateGenericHook{GENERIC}
\OldShowHook{GENERIC}
\ShowHook{GENERIC}
\UseHook{GENERIC}

\typeout{============================================}

\typeout{========== HOOK WITH ARGUMENTS A}

\OldShowHook{HWA-a)}
\ShowHook{HWA-a)}
\NewHookWithArguments{HWA-a)}{2}
\OldShowHook{HWA-a)}
\ShowHook{HWA-a)}

\typeout{============================================}

\NewHook{foo}
\AddToHook{foo}[label-A]{\typeout{A-code}}
\AddToHook{foo}[label-B]{\typeout{B-code}}
\AddToHook{foo}[label-C]{\typeout{C-code}}

\DeclareHookRule{foo}{label-A}{voids}{label-B}
\DebugPrintHook{foo}
\OldShowHook{foo}
\ShowHook{foo}

\DeclareHookRule{foo}{label-A}{incompatible-warning}{label-B}
\DebugPrintHook{foo}
\OldShowHook{foo}
\ShowHook{foo}

\DeclareHookRule{foo}{label-A}{unrelated}{label-B}
\DebugPrintHook{foo}
\OldShowHook{foo}
\ShowHook{foo}

\DeclareHookRule{foo}{label-B}{before}{label-A}
\DebugPrintHook{foo}
\OldShowHook{foo}
\ShowHook{foo}

\typeout{============================================}

\typeout{!!!! If this test changes the documentation needs updating !!!!}

\END
