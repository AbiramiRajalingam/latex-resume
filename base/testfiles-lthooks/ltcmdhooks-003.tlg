This is a generated file for the l3build validation system.
Don't change this file in any respect.
-> Adding cmd hook to 'fooA' (before):
[lthooks] analyzing '\fooA'
[lthooks] \fooA=\long macro:#1#2#3->(#1,#2,#3)
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
**** Add to hook cmd/fooA/before (lbl) on input line ... <- before
-> Adding cmd hook to 'fooA' (after):
[lthooks] analyzing '\fooA'
[lthooks] \fooA=\long macro:#1#2#3->\UseHook {cmd/fooA/before}(#1,#2,#3)
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
**** Add to hook cmd/fooA/after (lbl) on input line ... <- after
> \fooA=\long macro:
#1#2#3->\UseHook {cmd/fooA/before}(#1,#2,#3)\UseHook {cmd/fooA/after}.
<argument> \fooA 
l. ...\test\newcommand\fooA[3]{(#1,#2,#3)}
-> Adding cmd hook to 'fooB' (before):
[lthooks] analyzing '\fooB'
[lthooks] \fooB=macro:->\@protected@testopt \fooB \\fooB {x}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooB/before (lbl) on input line ... <- before
-> Adding cmd hook to 'fooB' (after):
[lthooks] analyzing '\fooB'
[lthooks] \fooB=macro:->\@protected@testopt \fooB \\fooB {x}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooB/after (lbl) on input line ... <- after
> \fooB=robust macro:
->\@protected@testopt \fooB \\fooB {x}.
> \\fooB=\long macro:
> default #1=x.
[#1]#2#3->\UseHook {cmd/fooB/before}(#1,#2,#3)\UseHook {cmd/fooB/after}.
<recently read> }
l. ...\test\newcommand\fooB[3][x]{(#1,#2,#3)}
-> Adding cmd hook to 'fooC' (before):
[lthooks] analyzing '\fooC'
[lthooks] \fooC=macro:->\protect \fooC  
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooC/before (lbl) on input line ... <- before
-> Adding cmd hook to 'fooC' (after):
[lthooks] analyzing '\fooC'
[lthooks] \fooC=macro:->\protect \fooC  
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooC/after (lbl) on input line ... <- after
> \fooC=robust macro:
->\protect \fooC  .
> \fooC =\long macro:
#1#2#3->\UseHook {cmd/fooC/before}(#1,#2,#3)\UseHook {cmd/fooC/after}.
<argument> \fooC  
l. ......t\DeclareRobustCommand\fooC[3]{(#1,#2,#3)}
-> Adding cmd hook to 'fooD' (before):
[lthooks] analyzing '\fooD'
[lthooks] \fooD=macro:->\protect \fooD  
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooD/before (lbl) on input line ... <- before
-> Adding cmd hook to 'fooD' (after):
[lthooks] analyzing '\fooD'
[lthooks] \fooD=macro:->\protect \fooD  
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/fooD/after (lbl) on input line ... <- after
> \fooD=robust macro:
->\protect \fooD  .
> \fooD =robust macro:
->\@protected@testopt \fooD  \\fooD  {x}.
> \\fooD =\long macro:
> default #1=x.
[#1]#2#3->\UseHook {cmd/fooD/before}(#1,#2,#3)\UseHook {cmd/fooD/after}.
<recently read> }
l. ......eclareRobustCommand\fooD[3][x]{(#1,#2,#3)}
**** Add to hook cmd/fooA/before (lbl) on input line ... <- before
**** Add to hook cmd/fooA/after (lbl) on input line ... <- after
> \fooA=macro:
#1#2#3->(#1,#2,#3).
<argument> \fooA 
l. ...\test\newcommand*\fooA[3]{(#1,#2,#3)}
**** Add to hook cmd/fooB/before (lbl) on input line ... <- before
**** Add to hook cmd/fooB/after (lbl) on input line ... <- after
> \fooB=robust macro:
->\@protected@testopt \fooB \\fooB {x}.
> \\fooB=macro:
> default #1=x.
[#1]#2#3->(#1,#2,#3).
<recently read> }
l. ...\test\newcommand*\fooB[3][x]{(#1,#2,#3)}
**** Add to hook cmd/fooC/before (lbl) on input line ... <- before
**** Add to hook cmd/fooC/after (lbl) on input line ... <- after
> \fooC=robust macro:
->\protect \fooC  .
> \fooC =macro:
#1#2#3->(#1,#2,#3).
<argument> \fooC  
l. ......\DeclareRobustCommand*\fooC[3]{(#1,#2,#3)}
**** Add to hook cmd/fooD/before (lbl) on input line ... <- before
**** Add to hook cmd/fooD/after (lbl) on input line ... <- after
> \fooD=robust macro:
->\protect \fooD  .
> \fooD =robust macro:
->\@protected@testopt \fooD  \\fooD  {x}.
> \\fooD =macro:
> default #1=x.
[#1]#2#3->(#1,#2,#3).
<recently read> }
l. ......clareRobustCommand*\fooD[3][x]{(#1,#2,#3)}
**** Add to hook cmd/fooA/before (lbl) on input line ... <- before
**** Add to hook cmd/fooA/after (lbl) on input line ... <- after
> \fooA=macro:
->(1,2,3).
<argument> \fooA 
l. ...\test\newcommand*\fooA{(1,2,3)}
**** Add to hook cmd/fooA/before (lbl) on input line ... <- before
**** Add to hook cmd/fooA/after (lbl) on input line ... <- after
> \fooA=\long macro:
->(1,2,3).
<argument> \fooA 
l. ...\test\newcommand\fooA{(1,2,3)}
**** Add to hook cmd/fooC/before (lbl) on input line ... <- before
**** Add to hook cmd/fooC/after (lbl) on input line ... <- after
> \fooC=robust macro:
->\protect \fooC  .
> \fooC =macro:
->(1,2,3).
<argument> \fooC  
l. ...\test\DeclareRobustCommand*\fooC{(1,2,3)}
**** Add to hook cmd/fooC/before (lbl) on input line ... <- before
**** Add to hook cmd/fooC/after (lbl) on input line ... <- after
> \fooC=robust macro:
->\protect \fooC  .
> \fooC =\long macro:
->(1,2,3).
<argument> \fooC  
l. ...\test\DeclareRobustCommand\fooC{(1,2,3)}
