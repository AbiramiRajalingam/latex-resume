This is a generated file for the l3build validation system.
Don't change this file in any respect.
Command patched with expand-and-redefine
-> Adding cmd hook to 'foo' (before):
[lthooks] analyzing '\foo'
[lthooks] \foo=macro:->\@protected@testopt \foo \\foo {opt}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/foo/before (top-level) on input line ... <- \typeout {[top-level] \string \foo \space with [##1]{##2}}
Update code for hook 'cmd/foo/before' on input line ...:
-> Adding cmd hook to 'foo' (after):
[lthooks] analyzing '\foo'
[lthooks] \foo=macro:->\@protected@testopt \foo \\foo {opt}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/foo/after (lbl) on input line ... <- \typeout {[main] \string \foo \space with [##1]{##2}}
Update code for hook 'cmd/foo/after' on input line ...:
Code labels for sorting:
 lbl
Data structure for label rules:
 lbl = 0 -> 
Handled code for lbl
[top-level] \foo with [##1]{##2}
\foo[hello]{world}
[main] \foo with [##1]{##2}
Command patched with retokenisation
-> Adding cmd hook to 'bar' (before):
[lthooks] analyzing '\bar'
[lthooks] \bar=macro:#1/#2/->\typeout {\string \bar {#1}{#2}}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
**** Add to hook cmd/bar/before (top-level) on input line ... <- \typeout {[top-level] \string \bar \space with {##1}{##2}}
Update code for hook 'cmd/bar/before' on input line ...:
-> Adding cmd hook to 'bar' (after):
[lthooks] analyzing '\bar'
[lthooks] \bar=macro:#1/#2/->\UseHook {cmd/bar/before}\typeout {\string \bar {#1}{#2}}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
**** Add to hook cmd/bar/after (lbl) on input line ... <- \typeout {[main] \string \bar \space with {##1}{##2}}
Update code for hook 'cmd/bar/after' on input line ...:
Code labels for sorting:
 lbl
Data structure for label rules:
 lbl = 0 -> 
Handled code for lbl
[top-level] \bar with {##1}{##2}
\bar{hello}{world}
[main] \bar with {##1}{##2}
ltcmd Command (always expand-and-redefine)
-> Adding cmd hook to 'baz' (before):
[lthooks] analyzing '\baz'
[lthooks] \baz=\protected macro:->\__cmd_start:nNNnnn {mo}\baz  \baz code {\__cmd_grab_m_1:w \__cmd_grab_D:w []}{}{}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
! Argument of \baz  has an extra }.
<inserted text> 
                \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \baz  was complete.
<to be read again> 
                   \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@do has an extra }.
<inserted text> 
                \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
{\__hook_cmd_patch_xparse:Nn }
! Paragraph ended before \robust@command@act@do was complete.
<to be read again> 
                   \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@loop has an extra }.
<inserted text> 
                \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \robust@command@act@loop was complete.
<to be read again> 
                   \par 
l. ......p-level] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......p-level] \string\baz\space with {#1}[#2]}}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......p-level] \string\baz\space with {#1}[#2]}}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/baz/before (top-level) on input line ... <- \typeout {[top-level] \string \baz \space with {##1}[##2]}
Update code for hook 'cmd/baz/before' on input line ...:
-> Adding cmd hook to 'baz' (after):
[lthooks] analyzing '\baz'
[lthooks] \baz=\protected macro:->\UseHook {cmd/baz/before}\__cmd_start:nNNnnn {mo}\baz  \baz code {\__cmd_grab_m_1:w \__cmd_grab_D:w []}{}{}
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[top-level] \baz with {##1}[##2]
! Argument of \baz  has an extra }.
<inserted text> 
                \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \baz  was complete.
<to be read again> 
                   \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@do has an extra }.
<inserted text> 
                \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
{\__hook_cmd_patch_xparse:Nn }
! Paragraph ended before \robust@command@act@do was complete.
<to be read again> 
                   \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@loop has an extra }.
<inserted text> 
                \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \robust@command@act@loop was complete.
<to be read again> 
                   \par 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......t{[main] \string\baz\space with {#1}[#2]}}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/baz/after (lbl) on input line ... <- \typeout {[main] \string \baz \space with {##1}[##2]}
Update code for hook 'cmd/baz/after' on input line ...:
Code labels for sorting:
 lbl
Data structure for label rules:
 lbl = 0 -> 
Handled code for lbl
[top-level] \baz with {##1}[##2]
! Argument of \hook_use:n has an extra }.
<inserted text> 
                \par 
l. ...\baz
         {hello}[world]
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \hook_use:n was complete.
<to be read again> 
                   \par 
l. ...\baz
         {hello}[world]
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
\baz{
}[-NoValue-]
ltcmd expandable Command (always expand-and-redefine)
-> Adding cmd hook to 'boo' (before):
[lthooks] analyzing '\boo'
[lthooks] \boo=macro:->\__cmd_start_expandable:nNNNNn {om}\boo  \boo  \boo code ?{\__cmd_expandable_grab_D:w \boo (arg 1) []\__cmd_expandable_grab_m:w }
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
! Argument of \boo  has an extra }.
<inserted text> 
                \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \boo  was complete.
<to be read again> 
                   \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@do has an extra }.
<inserted text> 
                \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
{\__hook_cmd_patch_xparse:Nn }
! Paragraph ended before \robust@command@act@do was complete.
<to be read again> 
                   \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@loop has an extra }.
<inserted text> 
                \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \robust@command@act@loop was complete.
<to be read again> 
                   \par 
l. ......level] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......level] \string\boo\space with [#1]{#2}^^J}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......level] \string\boo\space with [#1]{#2}^^J}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/boo/before (top-level) on input line ... <- [top-level] \string \boo \space with [##1]{##2}
Update code for hook 'cmd/boo/before' on input line ...:
-> Adding cmd hook to 'boo' (after):
[lthooks] analyzing '\boo'
[lthooks] \boo=macro:->\UseHook {cmd/boo/before}\__cmd_start_expandable:nNNNNn {om}\boo  \boo  \boo code ?{\__cmd_expandable_grab_D:w \boo (arg 1) []\__cmd_expandable_grab_m:w }
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
! You can't use `macro parameter character #' in horizontal mode.
\__hook_toplevel cmd/boo/before ...\space with [##
                                                  1]{##2}^^J
l. ......[main] \string\boo\space with [#1]{#2}^^J}
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.
! You can't use `macro parameter character #' in horizontal mode.
\__hook_toplevel cmd/boo/before ...e with [##1]{##
                                                  2}^^J
l. ......[main] \string\boo\space with [#1]{#2}^^J}
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.
! Argument of \boo  has an extra }.
<inserted text> 
                \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \boo  was complete.
<to be read again> 
                   \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@do has an extra }.
<inserted text> 
                \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
{\__hook_cmd_patch_xparse:Nn }
! Paragraph ended before \robust@command@act@do was complete.
<to be read again> 
                   \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Argument of \robust@command@act@loop has an extra }.
<inserted text> 
                \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \robust@command@act@loop was complete.
<to be read again> 
                   \par 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
\@nnil ->\@nil 
l. ......[main] \string\boo\space with [#1]{#2}^^J}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ command can be patched without rescanning
**** Add to hook cmd/boo/after (lbl) on input line ... <- [main] \string \boo \space with [##1]{##2}
Update code for hook 'cmd/boo/after' on input line ...:
Code labels for sorting:
 lbl
Data structure for label rules:
 lbl = 0 -> 
Handled code for lbl
! Argument of \hook_use:n has an extra }.
<inserted text> 
                \par 
l. ...\typeout{\boo[hello]{world}}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \hook_use:n was complete.
<to be read again> 
                   \par 
l. ...\typeout{\boo[hello]{world}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
[top-level] \boo with [##1]{##2}
\boo[-NoValue-]{
}
{cmd/boo/after}[hello]{world}
